
x-mssql-base: &mssql-base
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
        ACCEPT_EULA: "Y"
        SA_PASSWORD: "Password123!"
        MSSQL_PID: Developer
    expose:
    - "1433"
    healthcheck:
        test: ["CMD-SHELL", "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1"]
        interval: 5s
        timeout: 5s
        retries: 30

x-dotnet-common-env: &dotnet-common-env
    ASPNETCORE_URLS: "http://+:8080"
    ASPNETCORE_ENVIRONMENT: "Development"
    OpenTelemetry__OtlpEndpoint: "http://otel-collector:4317"
    Serilog__MinimumLevel__Default: "Information"
    Serilog__Override__Microsoft: "Warning"
    Serilog__Override__System: "Warning"

x-rabbitmq-common-env: &rabbitmq-common-env
  RabbitMQ__Host: "rabbitmq"
  RabbitMQ__Port: "5672"
  RabbitMQ__User: "guest"
  RabbitMQ__Password: "guest"
  RabbitMQ__Exchange: "article.published"
  RabbitMQ__QueueDurable: "true"
  

networks:
    happyheadlines:
        name: happyheadlines
services:
    global:    
        <<: *mssql-base
        container_name: global
        volumes:
        - mssql-global:/var/opt/mssql
    #europe:    
        #<<: *mssql-base
        #container_name: europe
        #volumes:
        #- mssql-europe:/var/opt/mssql
    #asia:    
        #<<: *mssql-base
        #container_name: asia
        #volumes:
        #- mssql-asia:/var/opt/mssql
    #africa:    
        #<<: *mssql-base
        #container_name: africa
        #volumes:
        #- mssql-africa:/var/opt/mssql
    #northamerica:    
        #<<: *mssql-base
        #container_name: northamerica
        #volumes:
        #- mssql-northamerica:/var/opt/mssql
    #southamerica:    
        #<<: *mssql-base
        #container_name: southamerica
        #volumes:
        #- mssql-southamerica:/var/opt/mssql
    #antarctica:    
        #<<: *mssql-base
        #container_name: antarctica
        #volumes:
        #- mssql-antarctica:/var/opt/mssql
    #australia:    
        #<<: *mssql-base
        #container_name: australia
        #volumes:
        #- mssql-australia:/var/opt/mssql

    profanitydatabase:
        <<: *mssql-base
        container_name: profanitydatabase
        volumes:
        - mssql-profanity:/var/opt/mssql

    commentdatabase:
        <<: *mssql-base
        container_name: commentdatabase
        volumes:
        - mssql-comment:/var/opt/mssql

    draftdatabase:
        <<: *mssql-base
        container_name: draftdatabase
        volumes:
        - mssql-draft:/var/opt/mssql

    profanityservice:
        build:
            context: .
            dockerfile: ProfanityService/Dockerfile
        environment:
            <<: *dotnet-common-env
            Serilog__Properties__Application: "ProfanityService"
            OpenTelemetry__ServiceName: "ProfanityService"
            Migrations__RunOnStartup: "false"
            ConnectionStrings__ProfanityDatabase: "Server=profanitydatabase,1433;Database=ProfanityDB;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
        ports:
        - "8004:8080"
        depends_on:
            profanitydatabase: { condition: service_healthy }
            otel-collector:
                condition: service_started
            seq:
                condition: service_started

    commentservice:
        build:
            context: .
            dockerfile: CommentService/Dockerfile
        environment:
            <<: *dotnet-common-env
            Serilog__Properties__Application: "CommentService"
            OpenTelemetry__ServiceName: "CommentService"
            Migrations__RunOnStartup: "false"
            ConnectionStrings__CommentDatabase: "Server=commentdatabase,1433;Database=CommentDB;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            profanityservice__BaseUrl: "http://profanityservice:8080"
        depends_on:
            profanityservice : { condition: service_started }
            commentdatabase : { condition: service_healthy }
            otel-collector:
                condition: service_started
            seq:
                condition: service_started
        ports:
        - "8006:8080"
    
    publisher-service:
        build:
            context: .
            dockerfile: PublisherService/Dockerfile
        environment:
            <<: [*dotnet-common-env, *rabbitmq-common-env]
            Serilog__Properties__Application: "PublisherService"
            OpenTelemetry__ServiceName: "PublisherService"
        depends_on:
            rabbitmq : { condition: service_healthy }
            otel-collector: {condition: service_started }
            seq: { condition: service_started }
        ports:
        - "8010:8080"

    newsletter-service:
        build:
            context: .
            dockerfile: NewsletterService/Dockerfile
        environment:
            <<: [*dotnet-common-env, *rabbitmq-common-env]
            Serilog__Properties__Application: "NewsletterService"
            OpenTelemetry__ServiceName: "NewsletterService"
            RabbitMQ__QueueName: "newsletter-service.events"
            ArticleService__BaseUrl: "http://article-service:8080"
            Newsletter__DailyInterval : "1.00:00:00"
        depends_on:
            rabbitmq : { condition: service_healthy }
            article-service : { condition: service_started }
            otel-collector:
                condition: service_started
            seq:
                condition: service_started
        ports:
        - "8012:8080"

    article-service:
        build:
            context: .
            dockerfile: ArticleService/Dockerfile
        environment:
            <<: [*dotnet-common-env, *rabbitmq-common-env]
            Serilog__Properties__Application: "ArticleService"
            OpenTelemetry__ServiceName: "ArticleService"
            RabbitMQ__QueueName: "article-service.events"
            Migrations__RunOnStartup: "false"
            ConnectionStrings__Articles__Global: "Server=global,1433;Database=Articles_Global;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__Africa: "Server=africa,1433;Database=Articles_Africa;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__Antarctica: "Server=antarctica,1433;Database=Articles_Antarctica;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__Asia: "Server=asia,1433;Database=Articles_Asia;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__Europe: "Server=europe,1433;Database=Articles_Europe;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__NorthAmerica: "Server=northamerica,1433;Database=Articles_NorthAmerica;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__Australia: "Server=australia,1433;Database=Articles_Australia;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            ConnectionStrings__Articles__SouthAmerica: "Server=southamerica,1433;Database=Articles_SouthAmerica;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
        depends_on:
            rabbitmq:      { condition: service_healthy }
            global:        { condition: service_healthy }
            #europe:        { condition: service_healthy }
            #asia:          { condition: service_healthy }
            #africa:        { condition: service_healthy }
            #northamerica:  { condition: service_healthy }
            #southamerica:  { condition: service_healthy }
            #antarctica:    { condition: service_healthy }
            #australia:     { condition: service_healthy }
            otel-collector: { condition: service_started }
            seq: { condition: service_started }
        ports:
        - "8000:8080"
    
    draftservice:
        build:
            context: .
            dockerfile: DraftService/Dockerfile
        environment:
            ASPNETCORE_URLS: "http://+:8080"
            ASPNETCORE_ENVIRONMENT: "Development"
            Migrations__RunOnStartup: "false"
            ConnectionStrings__DraftDatabase: "Server=draftdatabase,1433;Database=DraftDB;User Id=sa;Password=Password123!;Encrypt=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
            OpenTelemetry__ServiceName: "DraftService"
            OpenTelemetry__OtlpEndpoint: "http://otel-collector:4317"
        depends_on:
            draftdatabase: { condition: service_healthy }
            otel-collector:
                condition: service_started
            seq:
                condition: service_started
        ports:
        - "8008:8080"
    seq:
        image: datalust/seq:latest
        restart: unless-stopped
        environment:
            ACCEPT_EULA: "Y"
            SEQ_FIRSTRUN_NOAUTHENTICATION: "true"
            SEQ_RETENTIONPOLICY__DAYSKEPT: "14"
            SEQ_RETENTIONPOLICY__DISKSPACEALLOWED: "5GB"
        ports:
        - "5341:80"
        volumes:
        - seq-data:/data
    jaeger:
        image: jaegertracing/all-in-one:latest
        restart: unless-stopped
        environment:
            COLLECTOR_OTLP_ENABLED: "true"
        ports:
        - "16686:16686" # Jaeger UI
        - "14250:14250" # Jaeger gRPC collector endpoint (Used by OTEL-collector exporter)

    otel-collector:
        image: otel/opentelemetry-collector:latest
        command: ["--config", "/etc/otel-collector-config.yaml"]
        volumes:
        - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
        ports:
          - "4317:4317" # OTLP gRPC
          - "4318:4318" # OTLP HTTP

    rabbitmq:
        image: rabbitmq:3.13-management
        ports:
            - "5672:5672" # RabbitMQ main port
            - "15672:15672" # RabbitMQ management UI
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "ping"]
            interval: 10s
            timeout: 5s
            retries: 12
    redis:
        image: redis:7-alpine
        container_name: redis
        command: ["redis-server", "--save", "''","--appendonly", "no"]
        ports:
            - "6379:6379"
        networks: [happyheadlines]
        restarted: unless-stopped

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        command: ["--config.file=/etc/prometheus/prometheus.yml"]
        volumes:
            - ./observability/prometheus/prometheus.yml:/etc/prometheus/promethus.yml:ro
        ports:
            - "9090:9090"
        networks: [happyheadlines]
        restarted: unless-stopped

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        environment:
            GF_SECURITY_ADMIN_USER: "admin"
            GF_SECURITY_ADMIN_PASSWORD: "admin"
        volumes:
            - ./observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
            - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
            - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
        ports:
            - "3000:3000"
        depends_on: [prometheus]
        networks: [happyheadlines]
        restarted: unless-stopped

volumes:
    mssql-global:
    mssql-africa:
    mssql-asia:
    mssql-europe:
    mssql-northamerica:
    mssql-southamerica:
    mssql-antarctica:
    mssql-australia:
    mssql-profanity:
    mssql-comment:
    seq-data:
    mssql-draft:
    
    